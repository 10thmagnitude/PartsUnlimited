parameters:
  dependsOn: ''
  environment: ''
  webAppRG: ''
  webApp: ''
  vstsEndpoint: ''
  azureSub: ''
  slot: blue
  percentageToRoute: 20
  runLoadTests: no
  downloadSteps:
  - download: current
    artifact: drop

jobs:
- deployment: routeTraffic
  displayName: Deploy and Route Traffic to slot
  dependsOn: ${{ parameters.dependsOn }}
  variables:
    - name: artifactName
      value: drop
    - name: loadTestPath
      value: $(Pipeline.Workspace)/drop/loadtest
    - group: PartsUnlimited Terraform Secrets
  pool:
    vmImage: windows-latest
  environment:
    ${{ parameters.environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - ${{ parameters.downloadSteps }}

        - task: colinsalmcorner.colinsalmcorner-buildtasks.route-traffic-task.azureWebAppRouteTraffic@0
          displayName: 'Route Traffic: ${{ parameters.percentageToRoute }}% to ${{ parameters.slot }} on ${{ parameters.webApp }}'
          inputs:
            ConnectedServiceName: ${{ parameters.azureSub }}
            WebAppName: ${{ parameters.webApp }}
            ResourceGroupName: ${{ parameters.webAppRG }}
            Slot: ${{ parameters.slot }}
            percentTraffic: ${{ parameters.percentageToRoute }}

        - task: SqlAzureDacpacDeployment@1
          displayName: Prep Test Data
          inputs:
            azureSubscription: ${{ parameters.azureSub }}
            ServerName: cdpusqlprod.database.windows.net
            DatabaseName: PartsUnlimited
            SqlUsername: tfadmin
            SqlPassword: $(SQLPassword)
            deployType: InlineSqlTask
            SqlInline: | 
              IF (EXISTS (SELECT * 
                 FROM INFORMATION_SCHEMA.TABLES 
                 WHERE TABLE_SCHEMA = 'dbo' 
                 AND  TABLE_NAME = 'CartItems'))
              BEGIN
                  TRUNCATE TABLE CartItems
              END
        
        #- ${{ if eq(parameters.runLoadTests, 'yes') }}:
          # - task: CloudLoadTest@1
          #   displayName: Cloud Load Test FakeLoad.loadtest
          #   inputs:
          #     connectedServiceName: ${{ parameters.vstsEndpoint }}
          #     TestDrop: $(loadTestPath)
          #     LoadTest: FakeLoad.loadtest
          #     testContextParameters: -WebServer https://${{ parameters.webApp }}-${{ parameters.slot }}.azurewebsites.net
          #     TestSettings: $(loadTestPath)/cloud.testsettings
          #   condition: succeeded()

- job: jmeter
  displayName: JMeter Load Test
  condition: eq('${{ parameters.runLoadTests }}', 'yes')
  dependsOn: routeTraffic
  pool:
    vmImage: ubuntu-latest
  steps:
  - task: Bash@3
    displayName: Execute JMeter tests against ${{ parameters.webApp }}.azurewebsites.net
    inputs:
      targetType: filePath
      filePath: 'jmeter/test.sh'
      arguments: '$PWD CartTest.jmx ${{ parameters.webApp }}.azurewebsites.net'
      workingDirectory: jmeter

  - task: PublishPipelineArtifact@1
    displayName: Publish JMeter Report
    inputs:
      targetPath: jmeter/report
      artifact: jmeter
