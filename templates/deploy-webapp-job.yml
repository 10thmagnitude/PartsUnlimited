parameters:
  environment: ''
  logicalEnvironment: dev
  webAppRG: ''
  webApp: ''
  azureSub: ''
  vstsEndpoint: ''
  dependsOn: runTerraform
  runQuickPerfTests: no
  slot: 'production'
  downloadSteps:
  - download: current
    artifact: drop

jobs:
- deployment: deployWebApp
  dependsOn: ${{ parameters.dependsOn }}
  displayName: Deploy Web App
  pool:
    vmImage: windows-latest
  variables:
    package: $(Pipeline.Workspace)/drop/PartsUnlimitedWebsite.zip
  environment:
    ${{ parameters.environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - ${{ parameters.downloadSteps }}

        - task: AzureRmWebAppDeployment@4
          displayName: 'Azure App Service Deploy: ${{ parameters.webApp }}'
          inputs:
            azureSubscription: ${{ parameters.azureSub }}
            WebAppName: ${{ parameters.webApp }}
            packageForLinux: $(Package)
            deployToSlotOrASE: ${{ ne(parameters.slot, 'production') }}
            ResourceGroupName: ${{ parameters.webAppRG }}
            SlotName: ${{ parameters.slot }}
        
        - task: AzurePowerShell@4
          displayName: Set sticky for SlotName appsetting
          inputs:
            azureSubscription: ${{ parameters.azureSub }}
            ScriptType: InlineScript
            Inline: |
              New-AzResource -ResourceGroupName ${{ parameters.webAppRG }} -ResourceType Microsoft.Web/sites/Config -Name ${{ parameters.webApp }}/slotConfigNames -PropertyObject @{ appSettingNames = @("SlotName") } -ApiVersion 2015-08-01 -Force
            azurePowerShellVersion: LatestVersion
        
        - task: SqlAzureDacpacDeployment@1
          displayName: Clean SQL for load testing
          inputs:
            azureSubscription: ${{ parameters.azureSub }}
            ServerName: cdpusql${{ parameters.logicalEnvironment }}.database.windows.net
            DatabaseName: PartsUnlimited
            SqlUsername: tfadmin
            SqlPassword: $(SQLPassword)
            deployType: InlineSqlTask
            SqlInline: |
              DECLARE @itemCount INT;
              SELECT @itemCount = COUNT(CartItemId) FROM CartItems
              IF 1000 < @itemCount
                BEGIN
                  DELETE FROM CartItems;
                END
        
        - ${{ if eq(parameters.runQuickPerfTests, 'yes') }}:
          - task: QuickPerfTest@1
            displayName: Quick Web Performance Test PartsUnlimited-${{ parameters.logicalEnvironment }}
            inputs:
              connectedServiceName: ${{ parameters.vstsEndpoint }}
              websiteUrl: https://${{ parameters.webApp }}.azurewebsites.net
              testName: PartsUnlimited-${{ parameters.logicalEnvironment }}
              avgResponseTimeThreshold: 300
            condition: succeeded()
            continueOnError: true